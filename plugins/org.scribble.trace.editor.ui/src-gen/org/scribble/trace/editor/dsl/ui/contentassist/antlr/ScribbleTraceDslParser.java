/*
* generated by Xtext
*/
package org.scribble.trace.editor.dsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.scribble.trace.editor.dsl.services.ScribbleTraceDslGrammarAccess;

public class ScribbleTraceDslParser extends AbstractContentAssistParser {
	
	@Inject
	private ScribbleTraceDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.scribble.trace.editor.dsl.ui.contentassist.antlr.internal.InternalScribbleTraceDslParser createParser() {
		org.scribble.trace.editor.dsl.ui.contentassist.antlr.internal.InternalScribbleTraceDslParser result = new org.scribble.trace.editor.dsl.ui.contentassist.antlr.internal.InternalScribbleTraceDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTraceAccess().getGroup(), "rule__Trace__Group__0");
					put(grammarAccess.getTracedefnAccess().getGroup(), "rule__Tracedefn__Group__0");
					put(grammarAccess.getTracedefnAccess().getGroup_2(), "rule__Tracedefn__Group_2__0");
					put(grammarAccess.getTracedefnAccess().getGroup_2_2(), "rule__Tracedefn__Group_2_2__0");
					put(grammarAccess.getModuleAccess().getGroup(), "rule__Module__Group__0");
					put(grammarAccess.getModuleAccess().getGroup_1(), "rule__Module__Group_1__0");
					put(grammarAccess.getRoledefnAccess().getGroup(), "rule__Roledefn__Group__0");
					put(grammarAccess.getRoledefnAccess().getGroup_2(), "rule__Roledefn__Group_2__0");
					put(grammarAccess.getRoledefnAccess().getGroup_2_4(), "rule__Roledefn__Group_2_4__0");
					put(grammarAccess.getMessagetransferAccess().getGroup(), "rule__Messagetransfer__Group__0");
					put(grammarAccess.getMessagetransferAccess().getGroup_2(), "rule__Messagetransfer__Group_2__0");
					put(grammarAccess.getMessagetransferAccess().getGroup_2_1(), "rule__Messagetransfer__Group_2_1__0");
					put(grammarAccess.getMessagetransferAccess().getGroup_2_1_1(), "rule__Messagetransfer__Group_2_1_1__0");
					put(grammarAccess.getMessagetransferAccess().getGroup_7(), "rule__Messagetransfer__Group_7__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getParameterAccess().getGroup_1(), "rule__Parameter__Group_1__0");
					put(grammarAccess.getTraceAccess().getRolesAssignment_2(), "rule__Trace__RolesAssignment_2");
					put(grammarAccess.getTraceAccess().getStepsAssignment_3(), "rule__Trace__StepsAssignment_3");
					put(grammarAccess.getMessagetransferAccess().getParametersAssignment_2_1_0(), "rule__Messagetransfer__ParametersAssignment_2_1_0");
					put(grammarAccess.getMessagetransferAccess().getParametersAssignment_2_1_1_1(), "rule__Messagetransfer__ParametersAssignment_2_1_1_1");
					put(grammarAccess.getParameterAccess().getTypeAssignment_0(), "rule__Parameter__TypeAssignment_0");
					put(grammarAccess.getParameterAccess().getValueAssignment_1_1(), "rule__Parameter__ValueAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.scribble.trace.editor.dsl.ui.contentassist.antlr.internal.InternalScribbleTraceDslParser typedParser = (org.scribble.trace.editor.dsl.ui.contentassist.antlr.internal.InternalScribbleTraceDslParser) parser;
			typedParser.entryRuleTrace();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ScribbleTraceDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ScribbleTraceDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
