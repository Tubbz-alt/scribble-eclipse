/*
* generated by Xtext
*/
grammar InternalScribbleTraceDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.scribble.trace.editor.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.scribble.trace.editor.dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.scribble.trace.editor.dsl.services.ScribbleTraceDslGrammarAccess;

}

@parser::members {

 	private ScribbleTraceDslGrammarAccess grammarAccess;
 	
    public InternalScribbleTraceDslParser(TokenStream input, ScribbleTraceDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Trace";	
   	}
   	
   	@Override
   	protected ScribbleTraceDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleTrace
entryRuleTrace returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTraceRule()); }
	 iv_ruleTrace=ruleTrace 
	 { $current=$iv_ruleTrace.current; } 
	 EOF 
;

// Rule Trace
ruleTrace returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTraceAccess().getTraceAction_0(),
            $current);
    }
)
    { 
        newCompositeNode(grammarAccess.getTraceAccess().getTracedefnParserRuleCall_1()); 
    }
ruleTracedefn
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTraceAccess().getRolesRoledefnParserRuleCall_2_0()); 
	    }
		lv_roles_2_0=ruleRoledefn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTraceRule());
	        }
       		add(
       			$current, 
       			"roles",
        		lv_roles_2_0, 
        		"Roledefn");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getTraceAccess().getStepsStepdefnParserRuleCall_3_0()); 
	    }
		lv_steps_3_0=ruleStepdefn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTraceRule());
	        }
       		add(
       			$current, 
       			"steps",
        		lv_steps_3_0, 
        		"Stepdefn");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleSentence
entryRuleSentence returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSentenceRule()); } 
	 iv_ruleSentence=ruleSentence 
	 { $current=$iv_ruleSentence.current.getText(); }  
	 EOF 
;

// Rule Sentence
ruleSentence returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getSentenceAccess().getIDTerminalRuleCall()); 
    }
)+
    ;





// Entry rule entryRuleTracedefn
entryRuleTracedefn returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTracedefnRule()); } 
	 iv_ruleTracedefn=ruleTracedefn 
	 { $current=$iv_ruleTracedefn.current.getText(); }  
	 EOF 
;

// Rule Tracedefn
ruleTracedefn returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='trace' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTracedefnAccess().getTraceKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getTracedefnAccess().getIDTerminalRuleCall_1()); 
    }
(
	kw='by' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTracedefnAccess().getByKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getTracedefnAccess().getSentenceParserRuleCall_2_1()); 
    }
    this_Sentence_3=ruleSentence    {
		$current.merge(this_Sentence_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='shows' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTracedefnAccess().getShowsKeyword_2_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getTracedefnAccess().getSentenceParserRuleCall_2_2_1()); 
    }
    this_Sentence_5=ruleSentence    {
		$current.merge(this_Sentence_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTracedefnAccess().getSemicolonKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleModule
entryRuleModule returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleRule()); } 
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current.getText(); }  
	 EOF 
;

// Rule Module
ruleModule returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getModuleAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModuleAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getModuleAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleRoledefn
entryRuleRoledefn returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRoledefnRule()); } 
	 iv_ruleRoledefn=ruleRoledefn 
	 { $current=$iv_ruleRoledefn.current.getText(); }  
	 EOF 
;

// Rule Roledefn
ruleRoledefn returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='role' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRoledefnAccess().getRoleKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getRoledefnAccess().getIDTerminalRuleCall_1()); 
    }
(
	kw='simulating' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRoledefnAccess().getSimulatingKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getRoledefnAccess().getModuleParserRuleCall_2_1()); 
    }
    this_Module_3=ruleModule    {
		$current.merge(this_Module_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='protocol' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRoledefnAccess().getProtocolKeyword_2_2()); 
    }
    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    newLeafNode(this_ID_5, grammarAccess.getRoledefnAccess().getIDTerminalRuleCall_2_3()); 
    }
(
	kw='as' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRoledefnAccess().getAsKeyword_2_4_0()); 
    }
    this_ID_7=RULE_ID    {
		$current.merge(this_ID_7);
    }

    { 
    newLeafNode(this_ID_7, grammarAccess.getRoledefnAccess().getIDTerminalRuleCall_2_4_1()); 
    }
)?)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRoledefnAccess().getSemicolonKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleStepdefn
entryRuleStepdefn returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStepdefnRule()); }
	 iv_ruleStepdefn=ruleStepdefn 
	 { $current=$iv_ruleStepdefn.current; } 
	 EOF 
;

// Rule Stepdefn
ruleStepdefn returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getStepdefnAccess().getMessagetransferParserRuleCall()); 
    }
    this_Messagetransfer_0=ruleMessagetransfer
    { 
        $current = $this_Messagetransfer_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleMessagetransfer
entryRuleMessagetransfer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMessagetransferRule()); }
	 iv_ruleMessagetransfer=ruleMessagetransfer 
	 { $current=$iv_ruleMessagetransfer.current; } 
	 EOF 
;

// Rule Messagetransfer
ruleMessagetransfer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMessagetransferAccess().getMessagetransferAction_0(),
            $current);
    }
)this_ID_1=RULE_ID
    { 
    newLeafNode(this_ID_1, grammarAccess.getMessagetransferAccess().getIDTerminalRuleCall_1()); 
    }
(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMessagetransferAccess().getLeftParenthesisKeyword_2_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMessagetransferAccess().getParametersParameterParserRuleCall_2_1_0_0()); 
	    }
		lv_parameters_3_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMessagetransferRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMessagetransferAccess().getCommaKeyword_2_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMessagetransferAccess().getParametersParameterParserRuleCall_2_1_1_1_0()); 
	    }
		lv_parameters_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMessagetransferRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMessagetransferAccess().getRightParenthesisKeyword_2_2());
    }
)?	otherlv_7='from' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMessagetransferAccess().getFromKeyword_3());
    }
this_ID_8=RULE_ID
    { 
    newLeafNode(this_ID_8, grammarAccess.getMessagetransferAccess().getIDTerminalRuleCall_4()); 
    }
	otherlv_9='to' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMessagetransferAccess().getToKeyword_5());
    }
this_ID_10=RULE_ID
    { 
    newLeafNode(this_ID_10, grammarAccess.getMessagetransferAccess().getIDTerminalRuleCall_6()); 
    }
(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getMessagetransferAccess().getCommaKeyword_7_0());
    }
this_ID_12=RULE_ID
    { 
    newLeafNode(this_ID_12, grammarAccess.getMessagetransferAccess().getIDTerminalRuleCall_7_1()); 
    }
)*	otherlv_13=';' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getMessagetransferAccess().getSemicolonKeyword_8());
    }
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_type_0_0=RULE_STRING
		{
			newLeafNode(lv_type_0_0, grammarAccess.getParameterAccess().getTypeSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"STRING");
	    }

)
)(	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getEqualsSignKeyword_1_0());
    }
(
(
		lv_value_2_0=RULE_STRING
		{
			newLeafNode(lv_value_2_0, grammarAccess.getParameterAccess().getValueSTRINGTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"STRING");
	    }

)
))?)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


