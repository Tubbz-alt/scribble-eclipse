/*
 * generated by Xtext
 */
package org.scribble.editor.dsl.ui.contentassist

import org.scribble.editor.dsl.ui.contentassist.AbstractScribbleDslProposalProvider
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.scribble.editor.dsl.scribbleDsl.GlobalProtocolDecl
import org.scribble.editor.dsl.scribbleDsl.RoleDecl
import org.scribble.editor.dsl.scribbleDsl.GlobalMessageTransfer
import org.scribble.editor.dsl.scribbleDsl.GlobalRecursion
import org.scribble.editor.dsl.scribbleDsl.PayloadTypeDecl
import org.scribble.editor.dsl.scribbleDsl.Module
import org.scribble.editor.dsl.scribbleDsl.LocalRecursion
import org.scribble.editor.dsl.scribbleDsl.LocalProtocolDecl

/**
 * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
 */
class ScribbleDslProposalProvider extends AbstractScribbleDslProposalProvider {
	
	def globalRoleCompletion(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		var obj=model;
		
		while (obj != null) {
			
			if (obj instanceof GlobalProtocolDecl) {
				var GlobalProtocolDecl gpd=obj as GlobalProtocolDecl;

				for (RoleDecl role : gpd.getRoles()) {
					var String name=role.getName();
					if (role.getAlias() != null) {
						name = role.getAlias();
					}
					acceptor.accept(createCompletionProposal(name, context));
				}
				return;
			}
			
			obj = obj.eContainer();
		}
	}

	override completeGlobalChoice_Role(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		globalRoleCompletion(model, assignment, context, acceptor);
	}

	override completeGlobalMessageTransfer_FromRole(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		var GlobalMessageTransfer gmt=model as GlobalMessageTransfer;
		var obj=model;
		
		while (obj != null) {
			
			if (obj instanceof GlobalProtocolDecl) {
				var GlobalProtocolDecl gpd=obj as GlobalProtocolDecl;

				for (RoleDecl role : gpd.getRoles()) {
					var String name=role.getName();
					if (role.getAlias() != null) {
						name = role.getAlias();
					}
					if (!gmt.getToRoles().contains(name)) {
						acceptor.accept(createCompletionProposal(name, context));
					}
				}
				return;
			}
			
			obj = obj.eContainer();
		}
	}
	
	override completeGlobalMessageTransfer_ToRoles(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		var GlobalMessageTransfer gmt=model as GlobalMessageTransfer;
		var obj=model;
		
		while (obj != null) {
			
			if (obj instanceof GlobalProtocolDecl) {
				var GlobalProtocolDecl gpd=obj as GlobalProtocolDecl;

				for (RoleDecl role : gpd.getRoles()) {
					var String name=role.getName();
					if (role.getAlias() != null) {
						name = role.getAlias();
					}
					if (gmt.getFromRole() == null || !gmt.getFromRole().equals(name)) {
						acceptor.accept(createCompletionProposal(name, context));
					}
				}
				return;
			}
			
			obj = obj.eContainer();
		}
	}
	
	override completeGlobalContinue_Label(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		var obj=model;
		
		while (obj != null) {
			
			if (obj instanceof GlobalRecursion) {
				var GlobalRecursion gr=obj as GlobalRecursion;

				if (gr.getLabel() != null) {
					acceptor.accept(createCompletionProposal(gr.getLabel(), context));
				}
			}
			
			obj = obj.eContainer();
		}
	}

	override completeGlobalInterrupt_Role(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		globalRoleCompletion(model, assignment, context, acceptor);
	}

	override completePayloadElement_Type(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		var obj=model;
		
		while (obj != null) {
			
			if (obj instanceof Module) {
				var Module module=obj as Module;

				for (PayloadTypeDecl type : module.getTypes()) {
					if (type.getAlias() != null) {
						acceptor.accept(createCompletionProposal(type.getAlias(), context));
					}
				}
				return;
			}
			
			obj = obj.eContainer();
		}
	}
	
	def localRoleCompletion(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		var obj=model;
		
		while (obj != null) {
			
			if (obj instanceof LocalProtocolDecl) {
				var LocalProtocolDecl lpd=obj as LocalProtocolDecl;

				for (RoleDecl role : lpd.getRoles()) {
					var String name=role.getName();
					if (role.getAlias() != null) {
						name = role.getAlias();
					}
					acceptor.accept(createCompletionProposal(name, context));
				}
				return;
			}
			
			obj = obj.eContainer();
		}
	}

	override completeLocalSend_ToRoles(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		localRoleCompletion(model, assignment, context, acceptor);
	}

	override completeLocalReceive_FromRole(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		localRoleCompletion(model, assignment, context, acceptor);
	}
	
	override completeLocalChoice_Role(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		localRoleCompletion(model, assignment, context, acceptor);
	}
	
	override completeLocalContinue_Label(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		var obj=model;
		
		while (obj != null) {
			
			if (obj instanceof LocalRecursion) {
				var LocalRecursion lr=obj as LocalRecursion;

				if (lr.getLabel() != null) {
					acceptor.accept(createCompletionProposal(lr.getLabel(), context));
				}
			}
			
			obj = obj.eContainer();
		}
	}

	override completeLocalThrow_ToRoles(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		localRoleCompletion(model, assignment, context, acceptor);
	}
	
	override completeLocalCatch_FromRole(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		localRoleCompletion(model, assignment, context, acceptor);
	}
	
}
