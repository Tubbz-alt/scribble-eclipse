/**
 * generated by Xtext
 */
package org.scribble.editor.dsl.ui.labeling;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.scribble.editor.dsl.scribbleDsl.GlobalChoice;
import org.scribble.editor.dsl.scribbleDsl.GlobalContinue;
import org.scribble.editor.dsl.scribbleDsl.GlobalDo;
import org.scribble.editor.dsl.scribbleDsl.GlobalInterrupt;
import org.scribble.editor.dsl.scribbleDsl.GlobalInterruptible;
import org.scribble.editor.dsl.scribbleDsl.GlobalMessageTransfer;
import org.scribble.editor.dsl.scribbleDsl.GlobalParallel;
import org.scribble.editor.dsl.scribbleDsl.GlobalProtocolBlock;
import org.scribble.editor.dsl.scribbleDsl.GlobalProtocolDecl;
import org.scribble.editor.dsl.scribbleDsl.GlobalRecursion;
import org.scribble.editor.dsl.scribbleDsl.LocalCatch;
import org.scribble.editor.dsl.scribbleDsl.LocalChoice;
import org.scribble.editor.dsl.scribbleDsl.LocalContinue;
import org.scribble.editor.dsl.scribbleDsl.LocalDo;
import org.scribble.editor.dsl.scribbleDsl.LocalInterruptible;
import org.scribble.editor.dsl.scribbleDsl.LocalParallel;
import org.scribble.editor.dsl.scribbleDsl.LocalProtocolBlock;
import org.scribble.editor.dsl.scribbleDsl.LocalProtocolDecl;
import org.scribble.editor.dsl.scribbleDsl.LocalReceive;
import org.scribble.editor.dsl.scribbleDsl.LocalRecursion;
import org.scribble.editor.dsl.scribbleDsl.LocalSend;
import org.scribble.editor.dsl.scribbleDsl.LocalThrow;
import org.scribble.editor.dsl.scribbleDsl.Message;
import org.scribble.editor.dsl.scribbleDsl.MessageSignature;
import org.scribble.editor.dsl.scribbleDsl.Module;
import org.scribble.editor.dsl.scribbleDsl.PayloadTypeDecl;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
@SuppressWarnings("all")
public class ScribbleDslLabelProvider extends DefaultEObjectLabelProvider {
  @Inject
  public ScribbleDslLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  public String text(final Module elem) {
    String _name = elem.getName();
    return ("Module: " + _name);
  }
  
  public String text(final PayloadTypeDecl elem) {
    String _alias = elem.getAlias();
    return ("Type: " + _alias);
  }
  
  public String text(final GlobalProtocolDecl elem) {
    String _name = elem.getName();
    return ("Global Protocol: " + _name);
  }
  
  public String text(final GlobalProtocolBlock elem) {
    return "Sequence";
  }
  
  public String text(final GlobalMessageTransfer elem) {
    String _xblockexpression = null;
    {
      String message = null;
      Message _message = elem.getMessage();
      String _parameter = _message.getParameter();
      boolean _notEquals = (!Objects.equal(_parameter, null));
      if (_notEquals) {
        Message _message_1 = elem.getMessage();
        String _parameter_1 = _message_1.getParameter();
        String _plus = ("Parameter[" + _parameter_1);
        String _plus_1 = (_plus + "]");
        message = _plus_1;
      } else {
        Message _message_2 = elem.getMessage();
        MessageSignature _signature = _message_2.getSignature();
        boolean _notEquals_1 = (!Objects.equal(_signature, null));
        if (_notEquals_1) {
          Message _message_3 = elem.getMessage();
          MessageSignature _signature_1 = _message_3.getSignature();
          String _operator = _signature_1.getOperator();
          message = _operator;
        }
      }
      String _fromRole = elem.getFromRole();
      String _plus_2 = ((message + ": ") + _fromRole);
      String _plus_3 = (_plus_2 + " -> ");
      EList<String> _toRoles = elem.getToRoles();
      _xblockexpression = (_plus_3 + _toRoles);
    }
    return _xblockexpression;
  }
  
  public String text(final GlobalChoice elem) {
    String _role = elem.getRole();
    return ("Choice: at " + _role);
  }
  
  public String text(final GlobalParallel elem) {
    return "Parallel";
  }
  
  public String text(final GlobalRecursion elem) {
    String _label = elem.getLabel();
    return ("Recursion: " + _label);
  }
  
  public String text(final GlobalContinue elem) {
    String _label = elem.getLabel();
    return ("Continue: " + _label);
  }
  
  public String text(final GlobalDo elem) {
    return "Do";
  }
  
  public String text(final GlobalInterruptible elem) {
    return "Interruptible";
  }
  
  public String text(final GlobalInterrupt elem) {
    String _xblockexpression = null;
    {
      String messages = "";
      EList<Message> _messages = elem.getMessages();
      for (final Message mesg : _messages) {
        String _parameter = mesg.getParameter();
        boolean _notEquals = (!Objects.equal(_parameter, null));
        if (_notEquals) {
          String _parameter_1 = mesg.getParameter();
          String _plus = ((messages + "Parameter[") + _parameter_1);
          String _plus_1 = (_plus + "]");
          messages = _plus_1;
        } else {
          MessageSignature _signature = mesg.getSignature();
          boolean _notEquals_1 = (!Objects.equal(_signature, null));
          if (_notEquals_1) {
            MessageSignature _signature_1 = mesg.getSignature();
            String _operator = _signature_1.getOperator();
            String _plus_2 = (messages + _operator);
            messages = _plus_2;
          }
        }
      }
      String _role = elem.getRole();
      _xblockexpression = ((("Interrupt: " + messages) + " by ") + _role);
    }
    return _xblockexpression;
  }
  
  public String text(final LocalProtocolDecl elem) {
    String _name = elem.getName();
    String _plus = ("Local Protocol: " + _name);
    String _plus_1 = (_plus + " @ ");
    String _role = elem.getRole();
    return (_plus_1 + _role);
  }
  
  public String text(final LocalProtocolBlock elem) {
    return "Sequence";
  }
  
  public String text(final LocalSend elem) {
    String _xblockexpression = null;
    {
      String message = null;
      Message _message = elem.getMessage();
      String _parameter = _message.getParameter();
      boolean _notEquals = (!Objects.equal(_parameter, null));
      if (_notEquals) {
        Message _message_1 = elem.getMessage();
        String _parameter_1 = _message_1.getParameter();
        String _plus = ("Parameter[" + _parameter_1);
        String _plus_1 = (_plus + "]");
        message = _plus_1;
      } else {
        Message _message_2 = elem.getMessage();
        MessageSignature _signature = _message_2.getSignature();
        boolean _notEquals_1 = (!Objects.equal(_signature, null));
        if (_notEquals_1) {
          Message _message_3 = elem.getMessage();
          MessageSignature _signature_1 = _message_3.getSignature();
          String _operator = _signature_1.getOperator();
          message = _operator;
        }
      }
      EList<String> _toRoles = elem.getToRoles();
      _xblockexpression = ((message + ": to ") + _toRoles);
    }
    return _xblockexpression;
  }
  
  public String text(final LocalReceive elem) {
    String _xblockexpression = null;
    {
      String message = null;
      Message _message = elem.getMessage();
      String _parameter = _message.getParameter();
      boolean _notEquals = (!Objects.equal(_parameter, null));
      if (_notEquals) {
        Message _message_1 = elem.getMessage();
        String _parameter_1 = _message_1.getParameter();
        String _plus = ("Parameter[" + _parameter_1);
        String _plus_1 = (_plus + "]");
        message = _plus_1;
      } else {
        Message _message_2 = elem.getMessage();
        MessageSignature _signature = _message_2.getSignature();
        boolean _notEquals_1 = (!Objects.equal(_signature, null));
        if (_notEquals_1) {
          Message _message_3 = elem.getMessage();
          MessageSignature _signature_1 = _message_3.getSignature();
          String _operator = _signature_1.getOperator();
          message = _operator;
        }
      }
      String _fromRole = elem.getFromRole();
      _xblockexpression = ((message + ": from ") + _fromRole);
    }
    return _xblockexpression;
  }
  
  public String text(final LocalChoice elem) {
    String _role = elem.getRole();
    return ("Choice: at " + _role);
  }
  
  public String text(final LocalParallel elem) {
    return "Parallel";
  }
  
  public String text(final LocalRecursion elem) {
    String _label = elem.getLabel();
    return ("Recursion: " + _label);
  }
  
  public String text(final LocalContinue elem) {
    String _label = elem.getLabel();
    return ("Continue: " + _label);
  }
  
  public String text(final LocalDo elem) {
    return "Do";
  }
  
  public String text(final LocalInterruptible elem) {
    return "Interruptible";
  }
  
  public String text(final LocalThrow elem) {
    String _xblockexpression = null;
    {
      String messages = "";
      EList<Message> _messages = elem.getMessages();
      for (final Message mesg : _messages) {
        String _parameter = mesg.getParameter();
        boolean _notEquals = (!Objects.equal(_parameter, null));
        if (_notEquals) {
          String _parameter_1 = mesg.getParameter();
          String _plus = ((messages + "Parameter[") + _parameter_1);
          String _plus_1 = (_plus + "]");
          messages = _plus_1;
        } else {
          MessageSignature _signature = mesg.getSignature();
          boolean _notEquals_1 = (!Objects.equal(_signature, null));
          if (_notEquals_1) {
            MessageSignature _signature_1 = mesg.getSignature();
            String _operator = _signature_1.getOperator();
            String _plus_2 = (messages + _operator);
            messages = _plus_2;
          }
        }
      }
      EList<String> _toRoles = elem.getToRoles();
      _xblockexpression = ((("Throw: " + messages) + " to ") + _toRoles);
    }
    return _xblockexpression;
  }
  
  public String text(final LocalCatch elem) {
    String _xblockexpression = null;
    {
      String messages = "";
      EList<Message> _messages = elem.getMessages();
      for (final Message mesg : _messages) {
        String _parameter = mesg.getParameter();
        boolean _notEquals = (!Objects.equal(_parameter, null));
        if (_notEquals) {
          String _parameter_1 = mesg.getParameter();
          String _plus = ((messages + "Parameter[") + _parameter_1);
          String _plus_1 = (_plus + "]");
          messages = _plus_1;
        } else {
          MessageSignature _signature = mesg.getSignature();
          boolean _notEquals_1 = (!Objects.equal(_signature, null));
          if (_notEquals_1) {
            MessageSignature _signature_1 = mesg.getSignature();
            String _operator = _signature_1.getOperator();
            String _plus_2 = (messages + _operator);
            messages = _plus_2;
          }
        }
      }
      String _fromRole = elem.getFromRole();
      _xblockexpression = ((("Catch: " + messages) + " from ") + _fromRole);
    }
    return _xblockexpression;
  }
}
