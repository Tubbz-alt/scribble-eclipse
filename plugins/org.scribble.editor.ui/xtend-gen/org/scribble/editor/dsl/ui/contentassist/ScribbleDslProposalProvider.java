/**
 * generated by Xtext
 */
package org.scribble.editor.dsl.ui.contentassist;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.scribble.editor.dsl.scribbleDsl.GlobalMessageTransfer;
import org.scribble.editor.dsl.scribbleDsl.GlobalProtocolDecl;
import org.scribble.editor.dsl.scribbleDsl.GlobalRecursion;
import org.scribble.editor.dsl.scribbleDsl.LocalProtocolDecl;
import org.scribble.editor.dsl.scribbleDsl.LocalRecursion;
import org.scribble.editor.dsl.scribbleDsl.Module;
import org.scribble.editor.dsl.scribbleDsl.PayloadTypeDecl;
import org.scribble.editor.dsl.scribbleDsl.RoleDecl;
import org.scribble.editor.dsl.ui.contentassist.AbstractScribbleDslProposalProvider;

/**
 * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
 */
@SuppressWarnings("all")
public class ScribbleDslProposalProvider extends AbstractScribbleDslProposalProvider {
  public void globalRoleCompletion(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    EObject obj = model;
    boolean _notEquals = (!Objects.equal(obj, null));
    boolean _while = _notEquals;
    while (_while) {
      {
        if ((obj instanceof GlobalProtocolDecl)) {
          GlobalProtocolDecl gpd = ((GlobalProtocolDecl) obj);
          EList<RoleDecl> _roles = gpd.getRoles();
          for (final RoleDecl role : _roles) {
            {
              String name = role.getName();
              String _alias = role.getAlias();
              boolean _notEquals_1 = (!Objects.equal(_alias, null));
              if (_notEquals_1) {
                String _alias_1 = role.getAlias();
                name = _alias_1;
              }
              ICompletionProposal _createCompletionProposal = this.createCompletionProposal(name, context);
              acceptor.accept(_createCompletionProposal);
            }
          }
          return;
        }
        EObject _eContainer = obj.eContainer();
        obj = _eContainer;
      }
      boolean _notEquals_1 = (!Objects.equal(obj, null));
      _while = _notEquals_1;
    }
  }
  
  public void completeGlobalChoice_Role(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.globalRoleCompletion(model, assignment, context, acceptor);
  }
  
  public void completeGlobalMessageTransfer_FromRole(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    GlobalMessageTransfer gmt = ((GlobalMessageTransfer) model);
    EObject obj = model;
    boolean _notEquals = (!Objects.equal(obj, null));
    boolean _while = _notEquals;
    while (_while) {
      {
        if ((obj instanceof GlobalProtocolDecl)) {
          GlobalProtocolDecl gpd = ((GlobalProtocolDecl) obj);
          EList<RoleDecl> _roles = gpd.getRoles();
          for (final RoleDecl role : _roles) {
            {
              String name = role.getName();
              String _alias = role.getAlias();
              boolean _notEquals_1 = (!Objects.equal(_alias, null));
              if (_notEquals_1) {
                String _alias_1 = role.getAlias();
                name = _alias_1;
              }
              EList<String> _toRoles = gmt.getToRoles();
              boolean _contains = _toRoles.contains(name);
              boolean _not = (!_contains);
              if (_not) {
                ICompletionProposal _createCompletionProposal = this.createCompletionProposal(name, context);
                acceptor.accept(_createCompletionProposal);
              }
            }
          }
          return;
        }
        EObject _eContainer = obj.eContainer();
        obj = _eContainer;
      }
      boolean _notEquals_1 = (!Objects.equal(obj, null));
      _while = _notEquals_1;
    }
  }
  
  public void completeGlobalMessageTransfer_ToRoles(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    GlobalMessageTransfer gmt = ((GlobalMessageTransfer) model);
    EObject obj = model;
    boolean _notEquals = (!Objects.equal(obj, null));
    boolean _while = _notEquals;
    while (_while) {
      {
        if ((obj instanceof GlobalProtocolDecl)) {
          GlobalProtocolDecl gpd = ((GlobalProtocolDecl) obj);
          EList<RoleDecl> _roles = gpd.getRoles();
          for (final RoleDecl role : _roles) {
            {
              String name = role.getName();
              String _alias = role.getAlias();
              boolean _notEquals_1 = (!Objects.equal(_alias, null));
              if (_notEquals_1) {
                String _alias_1 = role.getAlias();
                name = _alias_1;
              }
              boolean _or = false;
              String _fromRole = gmt.getFromRole();
              boolean _equals = Objects.equal(_fromRole, null);
              if (_equals) {
                _or = true;
              } else {
                String _fromRole_1 = gmt.getFromRole();
                boolean _equals_1 = _fromRole_1.equals(name);
                boolean _not = (!_equals_1);
                _or = _not;
              }
              if (_or) {
                ICompletionProposal _createCompletionProposal = this.createCompletionProposal(name, context);
                acceptor.accept(_createCompletionProposal);
              }
            }
          }
          return;
        }
        EObject _eContainer = obj.eContainer();
        obj = _eContainer;
      }
      boolean _notEquals_1 = (!Objects.equal(obj, null));
      _while = _notEquals_1;
    }
  }
  
  public void completeGlobalContinue_Label(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    EObject obj = model;
    boolean _notEquals = (!Objects.equal(obj, null));
    boolean _while = _notEquals;
    while (_while) {
      {
        if ((obj instanceof GlobalRecursion)) {
          GlobalRecursion gr = ((GlobalRecursion) obj);
          String _label = gr.getLabel();
          boolean _notEquals_1 = (!Objects.equal(_label, null));
          if (_notEquals_1) {
            String _label_1 = gr.getLabel();
            ICompletionProposal _createCompletionProposal = this.createCompletionProposal(_label_1, context);
            acceptor.accept(_createCompletionProposal);
          }
        }
        EObject _eContainer = obj.eContainer();
        obj = _eContainer;
      }
      boolean _notEquals_1 = (!Objects.equal(obj, null));
      _while = _notEquals_1;
    }
  }
  
  public void completeGlobalInterrupt_Role(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.globalRoleCompletion(model, assignment, context, acceptor);
  }
  
  public void completePayloadElement_Type(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    EObject obj = model;
    boolean _notEquals = (!Objects.equal(obj, null));
    boolean _while = _notEquals;
    while (_while) {
      {
        if ((obj instanceof Module)) {
          Module module = ((Module) obj);
          EList<PayloadTypeDecl> _types = module.getTypes();
          for (final PayloadTypeDecl type : _types) {
            String _alias = type.getAlias();
            boolean _notEquals_1 = (!Objects.equal(_alias, null));
            if (_notEquals_1) {
              String _alias_1 = type.getAlias();
              ICompletionProposal _createCompletionProposal = this.createCompletionProposal(_alias_1, context);
              acceptor.accept(_createCompletionProposal);
            }
          }
          return;
        }
        EObject _eContainer = obj.eContainer();
        obj = _eContainer;
      }
      boolean _notEquals_1 = (!Objects.equal(obj, null));
      _while = _notEquals_1;
    }
  }
  
  public void localRoleCompletion(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    EObject obj = model;
    boolean _notEquals = (!Objects.equal(obj, null));
    boolean _while = _notEquals;
    while (_while) {
      {
        if ((obj instanceof LocalProtocolDecl)) {
          LocalProtocolDecl lpd = ((LocalProtocolDecl) obj);
          EList<RoleDecl> _roles = lpd.getRoles();
          for (final RoleDecl role : _roles) {
            {
              String name = role.getName();
              String _alias = role.getAlias();
              boolean _notEquals_1 = (!Objects.equal(_alias, null));
              if (_notEquals_1) {
                String _alias_1 = role.getAlias();
                name = _alias_1;
              }
              ICompletionProposal _createCompletionProposal = this.createCompletionProposal(name, context);
              acceptor.accept(_createCompletionProposal);
            }
          }
          return;
        }
        EObject _eContainer = obj.eContainer();
        obj = _eContainer;
      }
      boolean _notEquals_1 = (!Objects.equal(obj, null));
      _while = _notEquals_1;
    }
  }
  
  public void completeLocalSend_ToRoles(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.localRoleCompletion(model, assignment, context, acceptor);
  }
  
  public void completeLocalReceive_FromRole(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.localRoleCompletion(model, assignment, context, acceptor);
  }
  
  public void completeLocalChoice_Role(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.localRoleCompletion(model, assignment, context, acceptor);
  }
  
  public void completeLocalContinue_Label(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    EObject obj = model;
    boolean _notEquals = (!Objects.equal(obj, null));
    boolean _while = _notEquals;
    while (_while) {
      {
        if ((obj instanceof LocalRecursion)) {
          LocalRecursion lr = ((LocalRecursion) obj);
          String _label = lr.getLabel();
          boolean _notEquals_1 = (!Objects.equal(_label, null));
          if (_notEquals_1) {
            String _label_1 = lr.getLabel();
            ICompletionProposal _createCompletionProposal = this.createCompletionProposal(_label_1, context);
            acceptor.accept(_createCompletionProposal);
          }
        }
        EObject _eContainer = obj.eContainer();
        obj = _eContainer;
      }
      boolean _notEquals_1 = (!Objects.equal(obj, null));
      _while = _notEquals_1;
    }
  }
  
  public void completeLocalThrow_ToRoles(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.localRoleCompletion(model, assignment, context, acceptor);
  }
  
  public void completeLocalCatch_FromRole(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.localRoleCompletion(model, assignment, context, acceptor);
  }
}
